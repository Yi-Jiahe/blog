<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jiahe's Blog</title><link>https://yi-jiahe.github.io/blog/posts/</link><description>Recent content in Posts on Jiahe's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Aug 2023 03:33:04 +0000</lastBuildDate><atom:link href="https://yi-jiahe.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>SQLite3 and Go</title><link>https://yi-jiahe.github.io/blog/posts/sqlite3-and-go/</link><pubDate>Thu, 10 Aug 2023 03:33:04 +0000</pubDate><guid>https://yi-jiahe.github.io/blog/posts/sqlite3-and-go/</guid><description>The issue Using SQLite with go using using the mattn/go-sqlite3 module requires cgo which in turn requires gcc and complicates cross-compliation.
If developing on Windows, gcc needs to be installed which can be quite the ordeal.
If using multistage builds in Docker, care needs to be taken to ensure that the architecture matches the final stage. I encounted an issue when using the default golang image which is a Debian image to build for a final Alpine image.</description></item><item><title>Ttgo T5 V2 3</title><link>https://yi-jiahe.github.io/blog/posts/ttgo-t5-v2-3/</link><pubDate>Sun, 30 Jul 2023 21:05:01 +0800</pubDate><guid>https://yi-jiahe.github.io/blog/posts/ttgo-t5-v2-3/</guid><description>Motivation I found a new toy after being inspired by a post I saw about image generation AI model being run on a Raspberry Pi. One of the suggestions was to hook up the output to an eInk display because of the slow generation rate, with a link to some Raspberry Pi eInk display combos for ~100 pounds.
After a bit of searching and I found an esp32 connected 4.7&amp;quot; 540x960 eInk display for about 50SGD plus shipping.</description></item><item><title>Garmin Watchface</title><link>https://yi-jiahe.github.io/blog/posts/garmin-watchface/</link><pubDate>Tue, 23 Aug 2022 22:29:08 +0800</pubDate><guid>https://yi-jiahe.github.io/blog/posts/garmin-watchface/</guid><description>At the end of May I got a new running watch, specifically the Garmin Forerunner 55 since I had started running a couple of weeks before to prepare for my IPPT and I didn&amp;rsquo;t want to run with my phone and the GPS tracking was also quite bad. Having gotten a new fitness tracker, the first thing I did was of course to find out how to develop on it.</description></item><item><title>Gw2 Market Analysis 0.2.0</title><link>https://yi-jiahe.github.io/blog/posts/gw2-market-analysis-0.2.0/</link><pubDate>Sat, 06 Nov 2021 23:21:24 +0800</pubDate><guid>https://yi-jiahe.github.io/blog/posts/gw2-market-analysis-0.2.0/</guid><description>Financial Data is difficult to get. Its often rate limited, or charged by the number of API calls. On top of that, one needs to be on top of things to understand what they mean. In order to get my toes wet, I decided to explore the GW2 API and the BLTC, or in-game aution house to get some practical experience on how quantitative analysis and markets work.
GW2 Market Analysis is a Java application which scrapes the market every 12 hours to avoid aliasing, assuming that there exists periodic market fluctations with a period of one day.</description></item><item><title>Sound Site Conception</title><link>https://yi-jiahe.github.io/blog/posts/sound-site-conception/</link><pubDate>Sat, 06 Nov 2021 22:45:44 +0800</pubDate><guid>https://yi-jiahe.github.io/blog/posts/sound-site-conception/</guid><description>Sound site, (read: sound sight), is a small project I worked on a bit in late June, exploring the Web Audio API. The idea was to make a easily accessible way for people to visualize sound and explore the effects of audio effects on the waveform.
The basic idea of the Web Audio API is an Audio Routing Graph, which lives within an Audio Context. The graph is formed of individual Audio Nodes, of which there are three types, Sources or Inputs, Effects and Destinations or Outputs.</description></item><item><title>Hello Blog</title><link>https://yi-jiahe.github.io/blog/posts/hello-blog/</link><pubDate>Fri, 18 Jun 2021 11:37:24 +0800</pubDate><guid>https://yi-jiahe.github.io/blog/posts/hello-blog/</guid><description>Till now, I have been sharing my successes and completed projects on my portfolio at https://www.jiahe.dev, which you may want to take a look at. However, projects are never smooth sailing and some ideas have never seen the light of day. This blog is made for such projects, to document their progress regardless and for me to share my thoughts.
On that note, a couple of long running projects I have had which I hope to showcase some time in the future are my audio effects platform and drone development and simulation project.</description></item><item><title>Hello World</title><link>https://yi-jiahe.github.io/blog/posts/hello-world/</link><pubDate>Thu, 17 Jun 2021 11:37:31 +0800</pubDate><guid>https://yi-jiahe.github.io/blog/posts/hello-world/</guid><description>Orignally I had only planned for one Hello World post but because getting the blog up and running posed more of a challenge than initially expected, I&amp;rsquo;ll break it into two. This first post covers the process of creating the blog while the next will explain my rationale for creating the blog.
So, I started off looking at some popular options for webpage design and hosting like Wix and Wordpress, especially because I had heard things about how popular Wordpress was and figured it was a good skill to learn.</description></item></channel></rss>