<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web App on Jiahe's Blog</title><link>https://yi-jiahe.github.io/blog/tags/web-app/</link><description>Recent content in Web App on Jiahe's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 06 Nov 2021 23:21:24 +0800</lastBuildDate><atom:link href="https://yi-jiahe.github.io/blog/tags/web-app/index.xml" rel="self" type="application/rss+xml"/><item><title>Gw2 Market Analysis 0.2.0</title><link>https://yi-jiahe.github.io/blog/posts/gw2-market-analysis-0.2.0/</link><pubDate>Sat, 06 Nov 2021 23:21:24 +0800</pubDate><guid>https://yi-jiahe.github.io/blog/posts/gw2-market-analysis-0.2.0/</guid><description>&lt;p>Financial Data is difficult to get. Its often rate limited, or charged by the number of API calls. On top of that, one needs to be on top of things to understand what they mean. In order to get my toes wet, I decided to explore the GW2 API and the BLTC, or in-game aution house to get some practical experience on how quantitative analysis and markets work.&lt;/p>
&lt;p>&lt;a href="https://github.com/Yi-Jiahe/gw2-market-analysis" target="_blank">GW2 Market Analysis&lt;/a> is a Java application which scrapes the market every 12 hours to avoid aliasing, assuming that there exists periodic market fluctations with a period of one day. v0.1.0 of the application was completed in late August/ early September and implemented the scraper and database, such that there would be data for me to work with in the future. I set up a Lightsail instance to host the database and used a Systemd timer and service to schedule the scraper to run and store its results. I made use of the JDBC API to interact with my MySQL database on the machine.&lt;/p></description></item><item><title>Sound Site Conception</title><link>https://yi-jiahe.github.io/blog/posts/sound-site-conception/</link><pubDate>Sat, 06 Nov 2021 22:45:44 +0800</pubDate><guid>https://yi-jiahe.github.io/blog/posts/sound-site-conception/</guid><description>&lt;p>&lt;a href="https://github.com/Yi-Jiahe/soundsite" target="_blank">Sound site&lt;/a>, (read: sound sight), is a small project I worked on a bit in late June, exploring the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API" target="_blank">Web Audio API&lt;/a>. The idea was to make a easily accessible way for people to visualize sound and explore the effects of audio effects on the waveform.&lt;/p>
&lt;p>The basic idea of the Web Audio API is an Audio Routing Graph, which lives within an Audio Context. The graph is formed of individual Audio Nodes, of which there are three types, Sources or Inputs, Effects and Destinations or Outputs. Sources can be Oscillators which basically produce notes, Audio Recordings like files and Microphones. The Ouputs are basically the device speakers. Effects nodes can be compared to guitar effects pedals such as the DelayNode, DynamicsCompressorNode and GainNode. They do however, also provide functions like data analysis with the AnalyserNodes and other functions such as merging and splitting channels with the ChannelSplitterNode, ChannelMergerNode and audio spatialization.&lt;/p></description></item></channel></rss>